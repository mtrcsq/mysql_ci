<project>
    <shortName>sequoiasql</shortName>
    <fullName>SequoiaSQL MySQL Server</fullName>
    <version>1.0</version>
    <installerFilename>${product_shortname}-mysql-${product_version}-${platform}${edition}-installer.${platform_exec_suffix}</installerFilename>
    <allowLanguageSelection>1</allowLanguageSelection>
    <allowedLanguages>en zh_CN</allowedLanguages>

    <customLanguageFileList>
        <language>
            <code>en</code>
            <encoding>utf-8</encoding>
            <file>${build_project_directory}/sequoiamysql_en.lng</file>
        </language>
        <language>
            <code>zh_CN</code>
            <encoding>utf-8</encoding>
            <file>${build_project_directory}/sequoiamysql_zh.lng</file>
        </language>
    </customLanguageFileList>
    
    <licenseFileList>
        <licenseFile>
            <code>en</code>
            <file>${build_project_directory}/mysql/license/license_en.txt</file>
        </licenseFile>
        <licenseFile>
            <code>zh_CN</code>
            <encoding>utf-8</encoding>
            <file>${build_project_directory}/mysql/license/license_zh.txt</file>
        </licenseFile>
    </licenseFileList>
    
    <functionDefinitionList>
        <actionDefinition name="checkUmaskFunction">
            <actionList>
                <setInstallerVariableFromScriptOutput>
                    <name>full_mask</name>
                    <exec>umask</exec>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariableFromScriptOutput>
                    <name>other_mask</name>
                    <exec>echo</exec>
                    <execArgs>${full_mask} | awk '{print substr($0,length($0)-0,1)}'</execArgs>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariableFromScriptOutput>
                    <name>group_mask</name>
                    <exec>echo</exec>
                    <execArgs>${full_mask} | awk '{print substr($0,length($0)-1,1)}'</execArgs>
                </setInstallerVariableFromScriptOutput>
                <setInstallerVariableFromScriptOutput>
                    <name>user_mask</name>
                    <exec>echo</exec>
                    <execArgs>${full_mask} | awk '{print substr($0,length($0)-2,1)}'</execArgs>
                </setInstallerVariableFromScriptOutput>
                <showWarning>
                    <text>${msg(install.warnmsg.checkumask)}</text>
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <compareValues value1="${other_mask}" logic="greater" value2="2"/>
                        <compareValues value1="${group_mask}" logic="greater" value2="2"/>
                        <compareValues value1="${user_mask}"  logic="greater" value2="0"/>
                    </ruleList>
                </showWarning>
            </actionList>
        </actionDefinition>
   
        <actionDefinition name="checkFreeDiskSpaceFunction">
            <actionList>
                <throwError>
                    <text>${msg(install.errmsg.checkdisk)}</text>
                    <ruleList>
                        <checkFreeDiskSpace>
                            <logic>less_or_equal</logic>
                            <path>${installdir}</path>
                            <size>1000000</size>
                        </checkFreeDiskSpace>
                    </ruleList>
                </throwError>
            </actionList>
        </actionDefinition>
   
        <actionDefinition name="getSysType">
            <actionList>
                <getSymLinkTarget variable="pid1_fullpath">
                    <link>/proc/1/exe</link>
                </getSymLinkTarget>
                <setInstallerVariableFromRegEx>
                    <name>pid1_exe</name>
                    <pattern>(.*)/(.*)</pattern>
                    <substitution>\2</substitution>
                    <text>${pid1_fullpath}</text>
                </setInstallerVariableFromRegEx>
                <globalVariables names="${type}"/>
                <setInstallerVariable name="${type}" value="unknown"/>
                <setInstallerVariable name="${type}" value="SysV">
                    <ruleList>
                        <compareValues value1="${pid1_exe}" logic="equals" value2="init"/>
                    </ruleList>
                </setInstallerVariable>
                <setInstallerVariable name="${type}" value="systemd">
                    <ruleList>
                        <compareValues value1="${pid1_exe}" logic="equals" value2="systemd"/>
                    </ruleList>
                </setInstallerVariable>
            </actionList>
                <parameterList>
                    <stringParameter name="type" value="" default=""/>
                </parameterList>
        </actionDefinition>
   
        <actionDefinition name="deleteEnv">
            <actionList>
                <!--delete export line-->
                <setInstallerVariableFromScriptOutput>
                    <exec>grep</exec>
                    <execArgs>-n "^export PATH=\"\$PATH:${installdir}\/bin\"$" ${envFile} | awk -F ":" '{print $1}'</execArgs>
                    <name>line_num1</name>
                </setInstallerVariableFromScriptOutput>
                <runProgram>
                    <program>sed</program>
                    <programArguments>-i '${line_num1}d' ${envFile}</programArguments>
                    <ruleList>
                        <compareValues value1="${line_num1}" logic="greater" value2="0"/>
                    </ruleList>
                </runProgram>
                <setInstallerVariableFromScriptOutput>
                    <exec>grep</exec>
                    <execArgs>-n "^export LD_LIBRARY_PATH=\"\$LD_LIBRARY_PATH:${installdir}\/lib\"$" ${envFile} | awk -F ":" '{print $1}'</execArgs>
                    <name>line_num2</name>
                </setInstallerVariableFromScriptOutput>
                <runProgram>
                    <program>sed</program>
                    <programArguments>-i '${line_num2}d' ${envFile}</programArguments>
                    <ruleList>
                        <compareValues value1="${line_num2}" logic="greater" value2="0"/>
                    </ruleList>
                </runProgram>
                <!--delete empty file-->
                <runProgram>
                    <program>test</program>
                    <programArguments>-s ${envFile}</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                    <onErrorActionList>
                        <deleteFile path="${envFile}"/>
                    </onErrorActionList>
                </runProgram>
            </actionList>
            <parameterList>
                <stringParameter name="envFile" value="" default=""/>
            </parameterList>
        </actionDefinition>
   
        <actionDefinition name="addEnv">
            <actionList>
                <runProgram>
                    <program>grep</program>
                    <programArguments>-q "^export PATH=\"\$PATH:${installdir}\/bin\"$" ${envFile}</programArguments> 
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                <runProgram>
                    <abortOnError>0</abortOnError>
                    <program>echo</program>
                    <programArguments>"export PATH=\"\$PATH:${installdir}/bin\"" &gt;&gt; ${envFile}</programArguments>
                    <ruleList>
                        <compareText logic="does_not_equal" text="${program_exit_code}" value="0"/>
                    </ruleList>
                </runProgram>
                <runProgram>
                    <program>grep</program>
                    <programArguments>-q "^export LD_LIBRARY_PATH=\"\$LD_LIBRARY_PATH:${installdir}\/lib\"$" ${envFile}</programArguments> 
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                <runProgram>
                    <abortOnError>0</abortOnError>
                    <program>echo</program>
                    <programArguments>"export LD_LIBRARY_PATH=\"\$LD_LIBRARY_PATH:${installdir}/lib\"" &gt;&gt; ${envFile}</programArguments>
                    <ruleList>
                        <compareText logic="does_not_equal" text="${program_exit_code}" value="0"/>
                    </ruleList>
                </runProgram>
            </actionList>
            <parameterList>
                <stringParameter name="envFile" value="" default=""/>
            </parameterList>
        </actionDefinition>
   
        <actionDefinition name="delDefaultService">
            <actionList>
                <removeUnixService name="${service_name}"/>
            </actionList>
        </actionDefinition>
        
        <actionDefinition name="delSystemdService">
            <actionList>
                <runProgram>
                    <program>systemctl</program>
                    <programArguments>disable ${service_name}.service</programArguments>
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                <deleteFile path="${newsysconf_default}/${service_name}.service"/>
                <deleteFile path="${newsysconf_ubuntu}/${service_name}.service"/>
                <runProgram>
                    <program>systemctl</program>
                    <programArguments>daemon-reload</programArguments>
                    <customErrorMessage>${msg(install.errmsg.systemctlreload)}</customErrorMessage>
                </runProgram>
            </actionList>
        </actionDefinition>

        <actionDefinition name="startServiceFunction">
            <actionList>
                <runProgram><!--in case did not reload /etc/init.d/${service_name} -->
                    <abortOnError>0</abortOnError>
                    <showMessageOnError>0</showMessageOnError>
                    <program>systemctl</program>
                    <programArguments>daemon-reload</programArguments>
                </runProgram>
                <runProgram>
                    <customErrorMessage>${msg(install.errmsg.startservice)}</customErrorMessage>
                    <program>service</program>
                    <programArguments>${service_name} start</programArguments>
                    <onErrorActionList>
                        <consoleWrite text="&#xA;error message:&#xA;${program_stdout}&#xA;"/>
                    </onErrorActionList>
                </runProgram>
            </actionList>
        </actionDefinition>
        
        <actionDefinition name="addDefaultService">
            <actionList>
                <addUnixService>
                    <customErrorMessage>${msg(install.errmsg.addservice)}</customErrorMessage>
                    <name>${service_name}</name>
                    <program>${installdir}/bin/sequoiasql-mysql.sysv</program>
                </addUnixService>
                <deleteFile path="${installdir}/bin/sequoiasql-mysql.systemd"/>
            </actionList>
        </actionDefinition>
        
        <actionDefinition name="addSystemdService">
            <actionList>
                <substitute>
                    <files>${installdir}/bin/sequoiasql-mysql.systemd</files>
                    <type>exact</type>
                    <substitutionList>
                        <substitution pattern="/opt/sequoiasql/mysql" value="${installdir}"/>
                        <substitution pattern="XXXX" value="${username}"/>
                    </substitutionList>
                </substitute>
                <copyFile origin="${installdir}/bin/sequoiasql-mysql.systemd">
                    <destination>${newsysconf_default}/${service_name}.service</destination>
                    <ruleList>
                        <fileTest condition="is_not_empty" path="${newsysconf_default}"/>
                    </ruleList>
                </copyFile>
                <copyFile origin="${installdir}/bin/sequoiasql-mysql.systemd">
                    <destination>${newsysconf_ubuntu}/${service_name}.service</destination>
                    <ruleList>
                        <fileTest condition="is_not_empty" path="${newsysconf_ubuntu}"/>
                    </ruleList>
                </copyFile>
                <deleteFile path="${installdir}/bin/sequoiasql-mysql.sysv"/>
                <runProgram>
                    <program>systemctl</program>
                    <programArguments>daemon-reload</programArguments>
                    <customErrorMessage>${msg(install.errmsg.systemctlreload)}</customErrorMessage>
                </runProgram>
                <runProgram>
                    <program>systemctl</program>
                    <programArguments>enable ${service_name}.service</programArguments>
                    <customErrorMessage>${msg(install.errmsg.addservice)}</customErrorMessage>
                </runProgram>
            </actionList>
        </actionDefinition> 

        <actionDefinition name="addDefaultInstance">
           <actionList>
               <runProgram>
                   <program>${installdir}/bin/sdb_mysql_ctl</program>
                   <programArguments>addinst ${port} -d ${datadir}</programArguments>
                   <customErrorMessage>${msg(install.errmsg.addinst)}</customErrorMessage>
               </runProgram>
           </actionList>
        </actionDefinition>        
   
   </functionDefinitionList>

    <initializationActionList>
        <createTimeStamp>
            <variable>time</variable>
            <format>%Y-%m-%d-%H:%M:%S</format>
        </createTimeStamp>                 
        <setInstallerVariable name="project.rollbackBackupDirectory" value="${installdir}/rollback/BackupDir_${time}"/> 
        <setInstallerVariable name="sys_conf_file" value="/etc/default/sequoiasql-mysql" persist="1"/>
        <setInstallerVariable name="add_user_done"                   value="false"/>
        <setInstallerVariable name="add_group_done"                  value="false"/>
        <setInstallerVariable name="add_sysconf_done"                value="false"/>
        <setInstallerVariable name="exist_installinfo"               value="false"/>
        <setInstallerVariable name="newsysconf_default"              value="/usr/lib/systemd/system" persist="1"/>
        <setInstallerVariable name="newsysconf_ubuntu"               value="/lib/systemd/system" persist="1"/>
        <setInstallerVariable name="service_name"                    value="sequoiasql-mysql"/>
        
    </initializationActionList>
    
    <preInstallationActionList>

        <!--parameter passed in command line, should not ask again in dialog or gui-->
        <setInstallerVariable name="parameter(installdir).ask" value="0">
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--prefix" logic="contains"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="parameter(installInstance).ask" value="0">
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--installInstance" logic="contains"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="parameter(port).ask" value="0">
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--port" logic="contains"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="parameter(datadir).ask" value="0">
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--datadir" logic="contains"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="parameter(user_data).parameter(username).ask" value="0">
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--user" logic="contains"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="parameter(user_data).parameter(groupname).ask" value="0">
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--group" logic="contains"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="parameter(user_data).parameter(userpasswd).ask" value="0">
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--passwd" logic="contains"/>
            </ruleList>
        </setInstallerVariable>
        <setInstallerVariable name="parameter(user_data).ask" value="0">
            <ruleEvaluationLogic>and</ruleEvaluationLogic>
            <ruleList>
                <compareText text="${installer_command_line_arguments}" value="--user"   logic="contains"/>
                <compareText text="${installer_command_line_arguments}" value="--group"  logic="contains"/>
                <compareText text="${installer_command_line_arguments}" value="--passwd" logic="contains"/>
            </ruleList>
        </setInstallerVariable>

    </preInstallationActionList>
    
    <parameterList>
        <!--keep variable in both running time and building time-->          
        <stringParameter name="sql_type" ask="0" value=""/>
        
        <choiceParameter name="need_read_license">
            <ruleList>
                <compareValues value1="${installer_ui}" logic="equals" value2="text"/>
            </ruleList>
            <insertBefore>full_license</insertBefore>
            <default>false</default>
            <cliOptionShow>0</cliOptionShow>
            <explanation></explanation>
            <description>${msg(install.para.licenseread.license.information.part)}</description>
            <optionList>
                <option>
                    <text>${msg(install.para.licenseread.agree.description)}</text>
                    <value>false</value>
                    <description>${msg(install.para.licenseread.agree.explanation)}</description>
                </option>
                <option>
                    <text>${msg(install.para.licenseread.read.description)}</text>
                    <value>true</value>
                </option>
            </optionList>
        </choiceParameter>

        <licenseParameter name="full_license">
            <ruleEvaluationLogic>or</ruleEvaluationLogic>
            <ruleList>
                <compareValues value1="${installer_ui}" logic="does_not_equal" value2="text"/>
                <ruleGroup ruleEvaluationLogic="and">
                    <ruleList>
                        <compareValues value1="${installer_ui}" logic="equals" value2="text"/>
                        <isTrue value="${need_read_license}"/>
                    </ruleList>
                </ruleGroup>
            </ruleList>
            <title>License Agreement</title>
            <description>${msg(install.para.licenseread.read.description)}</description>
            <explanation></explanation>
            <file>${build_project_directory}/mysql/license/license_en.txt</file>
            <licenseFileList>
                <licenseFile>
                    <code>zh_CN</code>
                    <encoding>utf-8</encoding>
                    <file>${build_project_directory}/mysql/license/license_zh.txt</file>
                </licenseFile>
            </licenseFileList>
        </licenseParameter>
        
        <directoryParameter name="installdir">
            <insertAfter>full_license</insertAfter>
            <description>Installer.Parameter.installdir.description</description>
            <explanation>Installer.Parameter.installdir.explanation</explanation>
            <value></value>
            <default>${platform_install_prefix}/sequoiasql/mysql</default>
            <allowEmptyValue>0</allowEmptyValue>
            <ask>yes</ask>
            <cliOptionName>prefix</cliOptionName>
            <mustBeWritable>yes</mustBeWritable>
            <mustExist>0</mustExist>
            <width>40</width>
        </directoryParameter>
        <parameterGroup name="user_data">
            <insertAfter>installdir</insertAfter>
            <title>${msg(install.para.user.title)}</title>
            <explanation>${msg(install.para.user.explanation)}</explanation>
            <value></value>
            <default></default>
            <parameterList>
                <stringParameter>
                    <name>username</name>
                    <cliOptionName>user</cliOptionName>
                    <description>${msg(install.para.user.username.description)}</description>
                    <explanation></explanation>
                    <value>sdbadmin</value>
                    <default>sdbadmin</default>
                    <allowEmptyValue>0</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
                <stringParameter>
                    <name>groupname</name>
                    <cliOptionName>group</cliOptionName>
                    <description>${msg(install.para.user.groupname.description)}</description>
                    <explanation></explanation>
                    <value>${username}_group</value>
                    <default>${username}_group</default>
                    <allowEmptyValue>0</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
                <passwordParameter>
                    <name>userpasswd</name>
                    <cliOptionName>passwd</cliOptionName>
                    <description>${msg(install.para.user.password.description)}</description>
                    <explanation></explanation>
                    <value></value>
                    <default>${username}</default>
                    <allowEmptyValue>0</allowEmptyValue>
                    <descriptionRetype>${msg(install.para.user.reentrypw.description)}</descriptionRetype>
                    <width>40</width>                           
                </passwordParameter>
            </parameterList>
        </parameterGroup>
    
        <booleanParameter name="installInstance">
            <insertAfter>user_data</insertAfter>
            <description>${msg(install.para.inst.description)}</description>
            <explanation>${msg(install.para.inst.explanation)}</explanation>
            <value></value>
            <default>true</default>
            <cliOptionName>installInstance</cliOptionName>
        </booleanParameter>
        <stringParameter name="port">
            <insertAfter>installInstance</insertAfter>
            <cliOptionName>port</cliOptionName>
            <title>${msg(install.para.inst.port.title)}</title>
            <description>${msg(install.para.inst.port.description)}</description>
            <explanation></explanation>
            <value></value>
            <default>3306</default>
            <allowEmptyValue>1</allowEmptyValue>
            <width>40</width>
            <ruleList>
                <isTrue value="${installInstance}" />
            </ruleList>
        </stringParameter>
        <directoryParameter name="datadir">
            <insertAfter>port</insertAfter>
            <title>${msg(install.para.inst.datadir.title)}</title>
            <description>${msg(install.para.inst.datadir.description)}</description>
            <explanation></explanation>
            <value></value>
            <default>${installdir}/data${port}</default>
            <allowEmptyValue>0</allowEmptyValue>
            <ask>yes</ask>
            <cliOptionName>datadir</cliOptionName>
            <mustBeWritable>yes</mustBeWritable>
            <mustExist>0</mustExist>
            <width>40</width>
            <ruleList>
                <isTrue value="${installInstance}" />
            </ruleList>
        </directoryParameter>
    </parameterList>
    
    <readyToInstallActionList>  
        <!--remove last '/' in installdir-->
        <setInstallerVariableFromRegEx>
            <name>installdir</name>
            <pattern>/+$</pattern>
            <substitution></substitution>
            <text>${installdir}</text>
        </setInstallerVariableFromRegEx>
        <!--remove last '\' in installdir-->
        <setInstallerVariableFromRegEx>
            <name>installdir</name>
            <pattern>\\+$</pattern>
            <substitution></substitution>
            <text>${installdir}</text>
        </setInstallerVariableFromRegEx>
        <setInstallerVariable name="project.rollbackBackupDirectory" value="${installdir}/rollback/BackupDir_${time}"/>
        
        <actionGroup>
           <actionList>
              <propertiesFileGet>
                  <file>${sys_conf_file}</file>
                  <key>INSTALL_DIR</key>
                  <variable>installdir_inconf</variable>
                  <abortOnError>0</abortOnError>
                  <showMessageOnError>0</showMessageOnError>
              </propertiesFileGet>
              <setInstallerVariable name="exist_installinfo" value="true">
                  <ruleList>
                      <compareText logic="equals" text="${installdir_inconf}" value="${installdir}"/>
                  </ruleList>
              </setInstallerVariable>
           </actionList>
        </actionGroup>
        <actionGroup>
           <actionList>
              <consoleWrite text="&#xA;${msg(install.show.checkinstalldir.text)}&#xA;">
                  <ruleEvaluationLogic>and</ruleEvaluationLogic>
                  <ruleList>                                                                      
                      <fileTest condition="is_not_empty" path="${installdir}"/>
                      <isTrue value="${exist_installinfo}" />
                  </ruleList>
              </consoleWrite>
              <exit exitCode="0">
                  <ruleList>                                                                      
                      <fileTest condition="is_not_empty" path="${installdir}"/>
                      <isTrue value="${exist_installinfo}" />
                  </ruleList>
              </exit>
           </actionList>
        </actionGroup>
        <!--check disk-->
        <checkFreeDiskSpaceFunction/>

        <!--check umask-->
        <checkUmaskFunction/>
        
        <!--check or create user group-->
        <throwError>
            <text>The ROOT user is not allowed to create.</text>
            <ruleList>
                <compareValues>
                    <logic>equals</logic>
                    <value1>${username}</value1>
                    <value2>root</value2>
                </compareValues>
            </ruleList>
        </throwError>

        <setInstallerVariable name="exist_user" value="false"/>
        <setInstallerVariable>
            <name>exist_user</name>
            <value>true</value>
            <ruleList>
                <userTest logic="exists" username="${username}"/>
            </ruleList>
        </setInstallerVariable>

        <setInstallerVariable name="exist_group" value="false"/>
        <runProgram>
            <program>grep</program>
            <programArguments>"^$groupname:" /etc/group</programArguments>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </runProgram>
        <setInstallerVariable name="exist_group" value="true">
             <ruleList>
                 <compareText logic="equals" text="${program_exit_code}" value="0"/>
             </ruleList>
        </setInstallerVariable>


        <actionGroup>
            <ruleList>
                <isTrue value="${exist_user}"/>
            </ruleList>
            <actionList>
                <setInstallerVariableFromScriptOutput>
                    <name>actual_group</name>
                    <exec>id</exec>
                    <execArgs>-ng ${username}</execArgs>
                </setInstallerVariableFromScriptOutput>
                <throwError>
                    <text>${msg(Install.ErrorMsg.CheckGroup)}</text>
                    <ruleList>
                        <compareValues value1="${actual_group}" logic="does_not_equal" value2="${groupname}"/>
                    </ruleList>
                </throwError>
                <createDirectory path="~${username}"/>
            </actionList>
        </actionGroup>

        <actionGroup>
            <ruleList>
                <isFalse value="${exist_user}"/>
            </ruleList>
            <actionList>
                <addGroup> <!--if group exists, <addGroup> will not throw error-->
                    <customErrorMessage>${msg(Install.ErrorMsg.CreateGroup)}</customErrorMessage>
                    <groupname>${groupname}</groupname>
                </addGroup>
                <setInstallerVariable name="add_group_done" value="true">
                     <ruleEvaluationLogic>and</ruleEvaluationLogic>
                     <ruleList>
                         <isTrue value="${exist_group}"/>
                         <compareText logic="equals" text="${program_exit_code}" value="0"/>
                     </ruleList>
                </setInstallerVariable>
                <runProgram>
                    <customErrorMessage>${msg(Install.ErrorMsg.CreateUser)}</customErrorMessage>
                    <program>useradd</program>
                    <programArguments>${username} -m -p ${userpasswd} -g ${groupname}  -s /bin/bash </programArguments>
                </runProgram>
                <setInstallerVariable name="add_user_done" value="true">
                     <ruleList>
                         <compareText logic="equals" text="${program_exit_code}" value="0"/>
                     </ruleList>
                </setInstallerVariable>
            </actionList>
        </actionGroup>

        <runProgram>
            <program>echo</program>
            <programArguments> ${username}:${userpasswd} | chpasswd</programArguments>
        </runProgram>


    </readyToInstallActionList>

    <componentList>
        <component>
            <name>normal_component</name>
            <folderList>
                <folder>
                    <name>files</name>
                    <destination>${installdir}</destination>
                    <distributionFileList>
                        <distributionDirectory>
                            <allowWildcards>1</allowWildcards>
                            <origin>${build_project_directory}/mysql/*</origin>
                            <excludeFiles>${build_project_directory}/mysql/my.cnf</excludeFiles>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <name>conf_files</name>
                    <destination>${installdir}</destination>
                    <distributionFileList>
                        <distributionDirectory>
                            <allowWildcards>1</allowWildcards>
                            <origin>${build_project_directory}/mysql/*</origin>
                            <includeFiles>*/my.cnf</includeFiles>
                        </distributionDirectory>
                    </distributionFileList>
                    <ruleList>
                        <fileTest condition="not_exists" path="${installdir}/my.cnf"/>
                    </ruleList>
                </folder>
            </folderList>
        </component>
    </componentList>

    
    <postInstallationActionList>
        <!--update installdir/support-files/mysql.server-->
        <substitute>
            <files>${installdir}/support-files/mysql.server</files>
            <type>exact</type>
            <substitutionList>
                <substitution pattern="/opt/sequoiasql/mysql" value="${installdir}"/>
            </substitutionList>
        </substitute>
        <substitute>
            <files>${installdir}/bin/sequoiasql-mysql.sysv</files>
            <type>exact</type>
            <substitutionList>
                <substitution pattern="/opt/sequoiasql/mysql" value="${installdir}"/>
            </substitutionList>
        </substitute>
        <substitute>
            <files>${installdir}/bin/sdb_mysql_ctl</files>
            <type>exact</type>
            <substitutionList>
                <substitution pattern="XXXX" value="${username}"/>
                <substitution pattern="/opt/sequoiasql/mysql" value="${installdir}"/>
            </substitutionList>
        </substitute>
        <substitute>
            <files>${installdir}/my.cnf</files>
            <type>exact</type>
            <substitutionList>
                <substitution pattern="/opt/sequoiasql/mysql" value="${installdir}"/>
            </substitutionList>
        </substitute>
        <removeFilesFromUninstaller files="${installdir}/my.cnf"/>
        <!--write /etc/default/sequoiasql-mysql-->
        <deleteFile path="${sys_conf_file}"/>
        <touchFile path="${sys_conf_file}"/>
        <touchFile path="${installdir}/mysqld_multi.log"/>
        <changeOwnerAndGroup>
            <files>${installdir}/mysqld_multi.log</files>
            <group>${groupname}</group>
            <owner>${username}</owner>
        </changeOwnerAndGroup>
        <removeFilesFromUninstaller files="${installdir}/mysqld_multi.log"/>
        <setInstallerVariable name="md5_info_file" value="${installdir}/checksum.md5"/>
        <setInstallerVariable name="version_info_file" value="${installdir}/version.info"/>
        <deleteFile path="${md5_info_file}"/>
        <touchFile path="${md5_info_file}"/>
        <changeOwnerAndGroup>
            <files>${md5_info_file}</files>
            <group>${groupname}</group>
            <owner>${username}</owner>
        </changeOwnerAndGroup>
        <deleteFile path="${version_info_file}"/>
        <touchFile path="${version_info_file}"/>
        <changeOwnerAndGroup>
            <files>${version_info_file}</files>
            <group>${groupname}</group>
            <owner>${username}</owner>
        </changeOwnerAndGroup>
        <setInstallerVariable name="add_sysconf_done" value="true">
             <ruleList>
                 <compareText logic="equals" text="${program_exit_code}" value="0"/>
             </ruleList>
        </setInstallerVariable>
        <addFilesToUninstaller files="${sys_conf_file}"/>
        <addFilesToUninstaller files="${md5_info_file}"/>
        <addFilesToUninstaller files="${version_info_file}"/>
        <changePermissions files="${sys_conf_file}" permissions="0644"/>
        <propertiesFileSet>
            <file>${sys_conf_file}</file>
            <key>VERSION</key>
            <value>${product_version}</value>
        </propertiesFileSet>
        <propertiesFileSet>
            <file>${sys_conf_file}</file>
            <key>USER</key>
            <value>${username}</value>
        </propertiesFileSet>
        <propertiesFileSet>
            <file>${sys_conf_file}</file>
            <key>INSTALL_DIR</key>
            <value>${installdir}</value>
        </propertiesFileSet>
        <setInstallerVariable name="md5sum" value="0000"/>
        <setInstallerVariableFromScriptOutput>
            <exec>md5sum</exec>
            <execArgs>"${installer_pathname}" | cut -c 1-32 </execArgs>
            <name>md5sum</name>
        </setInstallerVariableFromScriptOutput>
        <propertiesFileSet>
            <file>${sys_conf_file}</file>
            <key>MD5</key>
            <value>${md5sum}</value>
        </propertiesFileSet>
        <addTextToFile>
            <file>${md5_info_file}</file>
            <text>${md5sum}</text>
        </addTextToFile>
        <addTextToFile>
            <file>${version_info_file}</file>
            <text>${product_version}</text>
        </addTextToFile>
        
        <touchFile path="~${username}/.bashrc"/>
        <runProgram>
            <program>chown</program><!--<changeOwnerAndGroup> isnt effective for hidden files-->
            <programArguments>-R ${username}:${groupname} ~${username}/.bashrc</programArguments>
            <ruleList>
                <fileExists path="~${username}/.bashrc"/>
            </ruleList>
        </runProgram>
        <touchFile path="~${username}/.bash_profile">
            <ruleEvaluationLogic>and</ruleEvaluationLogic>
            <ruleList>
                <fileExists path="~${username}/.bash_profile" negate="1"/>
                <fileExists path="~${username}/.profile" negate="1"/>
            </ruleList>
        </touchFile>
        <runProgram>
            <program>chown</program><!--<changeOwnerAndGroup> isnt effective for hidden files-->
            <programArguments>-R ${username}:${groupname} ~${username}/.bash_profile</programArguments>
            <ruleList>
                <fileExists path="~${username}/.bash_profile"/>
            </ruleList>
        </runProgram>
        
        <addEnv envFile="~${username}/.bashrc"/>
        <addEnv envFile="~${username}/.bash_profile">
            <ruleList>
                <fileExists path="~${username}/.bash_profile"/>
            </ruleList>
        </addEnv>
        <addEnv envFile="~${username}/.profile">
            <ruleList>
                <fileExists path="~${username}/.profile"/>
            </ruleList>
        </addEnv>
        
        <!--add and start service-->
        <getSysType type="sys_type"/>
        <if>
            <conditionRuleList>
                <compareValues value1="${sys_type}" logic="equals" value2="systemd"/>
            </conditionRuleList>
            <actionList>
                <addSystemdService/>
            </actionList>
            <elseActionList>
                <addDefaultService/>
            </elseActionList>
        </if>
        <setInstallerVariable name="add_service_done" value="true">
             <ruleList>
                 <compareText logic="equals" text="${program_exit_code}" value="0"/>
             </ruleList>
        </setInstallerVariable>
        <!--add instance-->
        <setInstallerVariableFromScriptOutput>
            <name>inst_num</name>
            <exec>${installdir}/bin/sdblist</exec>
            <execArgs>listinst | grep -v "Total" | wc -l</execArgs>
        </setInstallerVariableFromScriptOutput>
        <if>
            <conditionRuleList>
                <isTrue value="${installInstance}" />
                <compareValues value1="${inst_num}" logic="less" value2="2"/>
            </conditionRuleList>
            <actionList>
                <addDefaultInstance/>
            </actionList>
        </if>
        <startServiceFunction/>
        
    </postInstallationActionList>

    <installationAbortedActionList>
        <runProgram>
            <customErrorMessage>${msg(install.errmsg.deleteuser)}</customErrorMessage>
            <program>userdel</program>
            <programArguments>${username}</programArguments>
            <ruleList>
                <isTrue value="${add_user_done}"/>
            </ruleList>
        </runProgram>
        <deleteGroup>
            <groupname>${groupname}</groupname>
            <ruleList>
                <isTrue value="${add_group_done}"/>
            </ruleList>
        </deleteGroup>
    </installationAbortedActionList>
    
    <preUninstallationActionList>
        <!--stop process-->
        <runProgram>
            <program>service</program>
            <programArguments>sequoiasql-mysql stop</programArguments>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </runProgram>

        <runProgram>
            <program>${installdir}/bin/sdb_mysql_ctl</program>
            <programArguments>stopall</programArguments>
            <abortOnError>0</abortOnError>
            <showMessageOnError>0</showMessageOnError>
        </runProgram>
        
        <!--check process -->
        
    </preUninstallationActionList>

    <postUninstallationActionList>
        <!--remove service-->
        <getSysType type="sys_type"/>
        <if>
            <conditionRuleList>
                <compareValues value1="${sys_type}" logic="equals" value2="systemd"/>
            </conditionRuleList>
            <actionList>
                <delSystemdService/>
            </actionList>
            <elseActionList>
                <delDefaultService/>
            </elseActionList>
        </if>
        <!--delete environment-->
        <deleteEnv envFile="~${username}/.bashrc"/>
        <deleteEnv envFile="~${username}/.profile"/>
        <deleteEnv envFile="~${username}/.bash_profile"/>
    </postUninstallationActionList>
    
    <enableDebugger>1</enableDebugger>
    <enableRollback>1</enableRollback>
    <enableTimestamp>1</enableTimestamp>
    <requireInstallationByRootUser>1</requireInstallationByRootUser>
    <saveRelativePaths>1</saveRelativePaths>
    <singleInstanceCheck>1</singleInstanceCheck>
    <defaultUnixGroup>${groupname}</defaultUnixGroup>
    <defaultUnixOwner>${username}</defaultUnixOwner>
    <vendor>SequoiaSQL-MySQL</vendor>

</project>


